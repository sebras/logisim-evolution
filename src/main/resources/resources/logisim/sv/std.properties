#
# arith/Adder.java
#
adderCarryInTip = Överföringssiffra in: om 1, läggs ett extra till utgången
adderCarryOutTip = Överföringssiffra ut: 1 om summan spiller över de tillgängliga bitarna
adderComponent = Heladderare
adderInputTip = Ingång: ett av talen att addera
adderOutputTip = Utgång: summan av ingångarna (plus överföringssiffra in)
#
# arith/Arithmetic.java
#
arithmeticLibrary = Aritmetik
#
# arith/BitAdder.java
#
bitAdderComponent = Bitadderare
bitAdderInputTip = Ingång: bitarna som ska räknas
bitAdderOutputManyTip = Utgång: hur många ingångsbitar som är 1
gateInputsAttr = Antal ingångar
#
# arith/BitFinder.java
#
bitFinderComponent = Bitletare
bitFinderFindLabel = leta
bitFinderHighLabel = hög
bitFinderHighOption = Högsta %s
bitFinderIndexHighTip = Index: index för högsta %s bland ingångarna
bitFinderIndexLowTip = Index: index för lägsta %s bland ingångarna
bitFinderInputTip = Ingång: bitarna som ska genomsökas
bitFinderLowLabel = låg
bitFinderLowOption = Lägsta %s
bitFinderPresentTip = Finns: 1 om ingången innehåller en %s
bitFinderTypeAttr = Typ
#
# arith/Comparator.java
#
comparatorComponent = Komparator
comparatorEqualTip = Lika med: 1 om A lika med B
comparatorGreaterTip = Större än: 1 om A är större än B
comparatorInputATip = A: talet som föregår jämförelseoperationen
comparatorInputBTip = B: talet som följer på jämförelseoperationen
comparatorLessTip = Mindre än: 1 om A är mindre än B
comparatorType = Numerisk typ
twosComplementOption = Tvåkomplement
unsignedOption = Teckenlöst
#
# arith/Divider.java
#
dividerComponent = Dividerare
dividerDividendLowerTip = Täljare nedre: den nedre halvan av talet att dividera
dividerDividendUpperTip = Täljare övre: den övre halvan av talet att dividera
dividerDivisorTip = Nämnare: talet att dividera med
dividerOutputTip = Utgång: resultatet av att dividera täljaren med nämnaren
dividerRemainderOutput = rest
dividerRemainderTip = Rest: resten (täljare - utgång * nämnare)
dividerUpperInput = övre
#
# arith/Multiplier.java
#
multiplierCarryInTip = Överföringssiffra in: ett antal att lägga till utgången
multiplierCarryOutTip = Överföringssiffra ut: de övre bitarna av produkten
multiplierComponent = Multiplicerare
multiplierInputTip = Ingång: ett av talen att multiplicera
multiplierOutputTip = Utgång: produkten av ingånganra, plus överföringssiffran
#
# arith/Negator.java
#
negatorComponent = Negator
negatorInputTip = Ingång: talet som ska negeras
negatorOutputTip = Utgång: tvåkomplementsnegationen av ingången
#
# arith/Shifter.java
#
shiftArithmeticRight = Aritmetiskt höger
shifterComponent = Skiftare
shifterDistanceTip = Avstånd: hur långt ingången ska skiftas
shifterInputTip = Ingång: bitarna som ska skiftas
shifterOutputTip = Utgång: resultatet av att skifta ingången
shifterShiftAttr = Skifttyp
shiftLogicalLeft = Logiskt vänster
shiftLogicalRight = Logiskt höger
shiftRollLeft = Rotera vänster
shiftRollRight = Rotera höger
#
# arith/Subtractor.java
#
subtractorBorrowInTip = Lån in: om 1 minskas utgången med 1
subtractorBorrowOutTip = Lån Out: 1 om skillnaden ger ett negativt värde
subtractorComponent = Subtraherare
subtractorMinuendTip = Minuend: talet som ska subtraheras från
subtractorOutputTip = Utgång: skillnaden mellan minuenden och subtrahenden
subtractorSubtrahendTip = Subtrahend: talet som ska subtraheras från minuenden
#
# base/Base.java
#
baseLibrary = Bas
#
# base/Text.java
#
textComponent = Etikett
textFontAttr = Typsnitt
textHorzAlignAttr = Horisontell justering
textHorzAlignCenterOpt = Centrum
textHorzAlignLeftOpt = Vänster
textHorzAlignRightOpt = Höger
textTextAttr = Text
textVertAlignAttr = Vertikal justering
textVertAlignBaseOpt = Bas
textVertAlignBottomOpt = Botten
textVertAlignCenterOpt = Centrum
textVertAlignTopOpt = Toppen
#
# base/VhdlParser.java
#
CannotFindEntityException = Entitetsdeklarationen kan inte hittas
emptySourceException = Kan inte tolka tomt innehåll
genericDeclarationException = Otillåten generics-syntax
genericTypeException = Generics-typ stöds inte
genericValueException = Okänt standardvärde för generics
invalidTypeException = Ogiltig porttyp
portDeclarationException = Otillåten portsyntax
#
# Builtin.java
#
builtinLibrary = Inbyggt
#
# gates/AndGate.java
#
andGateComponent = AND-grind
#
# gates/Buffer.java
#
bufferComponent = Buffert
#
# gates/ControlledBuffer.java
#
controlledBufferComponent = Kontrollerad buffert
controlledControlOption = Kontrollsignalsplats
controlledInverterComponent = Kontrollerad inverterare
controlledLeftHanded = Vänsterhänt
controlledRightHanded = Högerhänt
#
# gates/EvenParityGate.java
#
evenParityComponent = Jämn paritet
#
# gates/GateAttributes.java
#
gateOutput01 = 0/1
gateOutput0Z = 0/flytande
gateOutputAttr = Utgångsvärde
gateOutputZ1 = flytande/1
gateSizeNormalOpt = Medium
xorBehaviorAttr = Fleringångsbeteende
xorBehaviorOdd = När ett udda antal finns
xorBehaviorOne = När ingången är på
#
# gates/Gates.java
#
gatesLibrary = Grindar
#
# gates/NandGate.java
#
nandGateComponent = NAND-grind
#
# gates/NegateAttribute.java
#
gateNegateAttr = Negera %s
#
# gates/NorGate.java
#
norGateComponent = NOR-grind
#
# gates/NotGate.java
#
notGateComponent = NOT-grind
#
# gates/OddParityGate.java
#
oddParityComponent = Udda paritet
#
# gates/OrGate.java
#
orGateComponent = OR-grind
#
# gates/PLA.java
#
Bit Width In = Bitbredd in
Bit Width Out = Bitbredd ut
input = ingång
output = utgång
PLA = PLA
plaClickToEdit = (klicka för att redigera)
plaEditMenuItem = Redigera PLA-program...
plaProgram = Program
#
# gates/PLATable.java
#
plaEditorTitle = PLA-programredigerare
plaFileCreateError = Kunde inte skapa fil.
plaFileOpenError = Kunde inte öppna fil.
plaLoadDialogTitle = Läs in PLA-program
plaLoadErrorTitle = Fel vid inläsning av PLA-program
plaSaveDialogTitle = Spara PLA-program
plaSaveErrorTitle = Fel vid sparning av PLA-program
#
# gates/XnorGate.java
#
xnorGateComponent = XNOR-grind
#
# gates/XorGate.java
#
xorGateComponent = XOR-grind
#
# InstanceComponent.java
#
KeywordNameError = Label är ett reserverat nyckelord som inte kan användas. Ange en annan etikett.
MatchedLabelNameError = Etikett och komponentnamn får inte var desamma (de är skiftlägesokänsliga). Ange en etikett skillt från komponentnamnet.
#
# InstanceTextField.java
#
changeLabelAction = Ändra etikett
#
# io/DipSwitch.java
#
DIP = DIP
DipSwitchComponent = DIP-brytare
nrOfSwitch = Antal brytare
#
# io/DotMatrix.java
#
ioInputColumn = Kolumner
ioInputRow = Radera
ioInputSelect = Välj rader/kolumner
ioMatrixCols = Matriskolumner
ioMatrixInput = Indataformat
ioMatrixPersistenceAttr = Kort persistens
ioMatrixRows = Matrisrader
ioMatrixShape = Punktform
ioShapeCircle = Cirkulär
ioShapeSquare = Fyrkantig
#
# io/extra/Buzzer.java
#
buzzerFrequecy = frekvens
buzzerVolume = volym
buzzerVolumeBitWidth = volymbitbredd
dHz (0.1Hz) = dHz (0.1Hz)
enableSound = Aktivera ljud
Hz = Hz
#
# io/extra/DigitalOscilloscope.java
#
BorderColor = Ramfärg
bothOption = båda
ClearDiagram = Rensa diagram
DigitalOscilloscopeClock = klocka
DrawClockFrontLine = rita frontlinje för klocka
noOption = ingen
ShowClockAttribute = Visa klockattribut
stdTriggerFalling = Fallande flank
stdTriggerRising = Stigande flank
#
# io/extra/ITA_IO.java
#
buzzerComponent = summer
DigitalOscilloscopeComponent = digital oscillering
PlaRomComponent = PLA
Slider = skjutreglare
switchComponent = brytare
#
# io/extra/PlaRom.java
#
memCSTip = Chip-selektor: 0 inaktiverar komponent
PlaANDAttr = Och
PlaOutputsAttr = Utgång
ramCSLabel = sel
#
# io/extra/PlaRomData.java
#
PlaEditWindowTitel = Pla-Rom %s redigeringsfönster
#
# io/extra/ProgrammableGenerator.java
#
NStateAttr = Antal tillstånd
ProgrammableGeneratorComponent = Programmerbar generator
ramClearMenuItem = Rensa innehåll
ramEditMenuItem = Redigera innehåll...
romContentsAttr = Innehåll
romContentsValue = (klicka för att redigera)
#
# io/extra/Slider.java
#
left_to_rightOption = vänster till höger
right_to_leftOption = höger till vänster
#
# io/HexDigit.java
#
hexDigitDataTip = Data: nibble att visa i hex
hexDigitDPTip = Decimalpunkt: tänder decimalpunkten
#
# io/Io.java
#
buttonComponent = Knapp
dipswitchComponent = Dip-brytare
dotMatrixComponent = LED-matris
hexDigitComponent = Display för hexsiffra
ioActiveAttr = Aktiv hög?
ioBackgroundColor = Bakgrund
ioColorAttr = Färg
ioLibrary = Ingång/utgång
ioOffColor = Av-färg
ioOnColor = På-färg
joystickComponent = Joystick
ledComponent = LED
pioComponent = Port-I/O
repLBComponent = Reptar Local Bus
RGBledComponent = RGBLED
sevenSegmentComponent = 7-segmentsdisplay
ttyComponent = TTY
#
# io/Joystick.java
#
ioBitWidthAttr = Bitbredd
#
# io/Keyboard.java
#
keybAvailTip = Tillgängligt: 1 när bufferten innehåller tecken
keybBufferLengthAttr = Buffertlängd
keybClearTip = Rensa: 1 tömmer buffert
keybClockTip = Klocka: aktiverare konsumerar buffertens första tecken
keybDesc = tangentbord (buffertkapacitet %s)
keybEnableTip = Läsaktivering: 0 inaktiverar klocka
keyboardComponent = Tangentbord
keybOutputTip = Data: ASCII-värden för buffertens första tecken
#
# io/PortIO.java
#
pioDirection = Porttyp:
pioInput = Endast ingångar
pioInputs = Ingångar %s
pioIOMultiple = I/O (aktivering per bit)
pioIOSingle = I/O (enstaka aktivering)
pioNumber = Antal pinnar
pioOutEnable = Utgångsaktivering
pioOutEnables = Utgångsaktiveringar %s
pioOutput = Endast utgångar
pioOutputs = Utgångar %s
#
# io/ReptarLocalBus.java
#
repLBTip = B-tips
#
# io/RGBLed.java
#
BLUE = Blå ingång
GREEN = Grön ingång
RED = Röd ingång
#
# io/SevenSegment.java
#
DecimalPoint = Decimalpunkt
Segment_A = Segment A
Segment_B = Segment B
Segment_C = Segment C
Segment_D = Segment D
Segment_E = Segment E
Segment_F = Segment F
Segment_G = Segment G
SevenSegDP = Har decimalpunkt:
#
# io/Tty.java
#
ttyClearTip = Rensa: 1 rensar skärmen
ttyClockTip = Klocka: aktiverare lägger till tecken från ingång
ttyColsAttr = Kolumner
ttyDesc = TTY (%s rader, %s kolumner)
ttyDescShort = TTY
ttyEnableTip = Skrivaktivering: 0 inaktiverar klocka
ttyInputTip = Data: ASCII-värde för nästa tecken att skriva
ttyRowsAttr = Rader
#
# io/Video.java
#
rgbVideoCLK = Klocka
rgbVideoColor = Färgmodell
rgbVideoComponent = RGB-video
rgbVideoCursor = Markör
rgbVideoData = Data i %s-format
rgbVideoHeight = Höjd
rgbVideoReset = Återställningsbeteende
rgbVideoRST = Återställ
rgbVideoScale = Skala
rgbVideoWE = Skrivaktivering
rgbVideoWidth = Bredd
rgbVideoX = X-koordinat
rgbVideoY = Y-koordinat
#
# library/bcd2sevenseg.java
#
BCD Value = BCD-värde
BCD2SevenSegment = BCD till sjusegment
#
# library/BFHPraktika.java
#
BFH mega functions = BFH mega-funktioner
Bin2BCD = Binärt till BCD
#
# library/bin2bcd.java
#
Binairy data bits = Binära databitar
BinairyInputTip = Binäringång
#
# memory/AbstractFlipFlop.java
#
flipFlopClockTip = Klocka: tillstånd uppdaterars vid aktivering
flipFlopNotQTip = Komplement till aktuellt vipptillstånd
flipFlopPresetTip = Förinställ: När 1, pinntillstånd till 1 asynkront
flipFlopQTip = Aktuellt vipptillstånd
flipFlopResetTip = Rensa: När 1, pinntillstånd till 0 asynkront
#
# memory/Counter.java
#
counterCarryTip = Överföringssiffra: är 1 när värde når maximum (minimum vid dekrementering)
counterClockTip = Klocka: värde kan uppdateras vid aktivering
counterComponent = Räknare
counterDataTip = Data: värde att läsa in i räknare
counterEnableLabel = ct
counterEnableTip = Aktivera: när 1 inkrementerar eller dekrementerar räknaren
counterGoalAttr = Åtgärd vid överspill
counterGoalContinue = Fortsätt räkna
counterGoalLoad = Läs in nästa värde
counterGoalStay = Stanna vid värde
counterGoalWrap = Slå runt
counterLabel = ctr
counterLoadTip = Läs in: när 1, läser in data från ingång
counterMaxAttr = Maxvärde
counterQTip = Utgång: aktuellt värde för räknare
counterResetTip = Rensa: när 1, återställer till 0 asynkront
counterUpDownTip = Upp/ner: när 1, inkrementerar räknaren, när 0, dekrementerar räknaren
#
# memory/JKFlipFlop.java
#
jkFlipFlopComponent = J-K-vippa
#
# memory/Mem.java
#
memAsyncRead = Asynkron läsning:
memByte = Användningsbyte aktiverar
memDual = Dubbel
memEnables = Aktiverar:
memLine = Användningssignal aktiverar
memLineSize = Radstorlek
memMisaligned = Tillåt felinriktade?
memOcto = Octo
memQuad = Quad
memRaw = Läsning efter skriving
memReadBehav = Läsbeteende
memSingle = Enkel
memWar = Skrivning efter läsning
ramAddrWidthAttr = Adressbitbredd
ramDataWidthAttr = Databitbredd
ramSelAttr = Val
stdTriggerHigh = Hög nivå
stdTriggerLow = Låg nivå
#
# memory/MemMenu.java
#
ramConfirmClearMsg = Är du säker på att du vill nolla ut minnet?
ramConfirmClearTitle = Bekräfta rensning
ramLoadMenuItem = Läs in avbild...
ramSaveMenuItem = Spara avbild...
#
# memory/Memory.java
#
dFlipFlopComponent = D-vippa
memoryLibrary = Minne
tFlipFlopComponent = T-vippa
#
# memory/Ram.java
#
ramComponent = RAM
#
# memory/RamAppearance.java
#
memAddrTip = Adress: åtkomstplats i minne
memDataTip = Data: värde att läsa in från adress
memDataTip0 = Data: värde att läsa in från adress+0
memDataTip1 = Data: värde att läsa in från adress+1
memDataTip2 = Data: värde att läsa in från adress+2
memDataTip3 = Data: värde att läsa in från adress+3
ramByteEnableTip0 = Byte-aktivering för byte 0
ramByteEnableTip1 = Byte-aktivering för byte 1
ramByteEnableTip2 = Byte-aktivering för byte 2
ramByteEnableTip3 = Byte-aktivering för byte 3
ramClkTip = Klocka: minnesvärde uppdateras vid stigning från 0 till 1
ramClrPin = Rensa: ett etta sätter alla minnespositioner till 0
ramInTip = Ingång: värde att lagra på adress
ramInTip0 = Ingång: värde att lagra på adress+0
ramInTip1 = Ingång: värde att lagra på adress+1
ramInTip2 = Ingång: värde att lagra på adress+2
ramInTip3 = Ingång: värde att lagra på adress+3
ramLETip0 = Line enable for address+0
ramLETip1 = Line enable for address+1
ramLETip2 = Line enable for address+2
ramLETip3 = Line enable for address+3
ramOETip = Lås ut: om 1, läs ut minne till utgång
ramWETip = Lagra: om 1, lagra ingång i minne
#
# memory/RamAttributes.java
#
ramBidirDataBus = En bidirektionell databuss
ramByteEnables = Läs/skrivkontroll
RamClearPin = Använd resningspinne
ramDataAttr = Implementation av databuss
ramNoByteEnables = Endast helordsläsning/-skrivning
ramSeparateDataBus = Separat databuss för läsning och skrivning
ramTypeAttr = Ram-typ
ramTypeNonVolatile = icke-flyktigt
ramTypeVolatile = flyktigt
ramWithByteEnables = Använd byte-aktiveringar
#
# memory/Random.java
#
randomClockTip = Klocka: värde uppdateras vid aktivering
randomComponent = Slumptalsgenerator
randomLabel = slumptal
randomNextTip = Aktivera: stega till nästa i sekvensen vid klockaktivering
randomQTip = Utgång: aktuellt tal i sekvens
randomResetTip = Rensa: När 1, återställa till initialfrö asynkront
randomSeedAttr = Frö
randomWidthLabel = Bredd: %d
#
# memory/Register.java
#
registerClkTip = Klocka: värde uppdateras vid aktivering
registerClrTip = Rensa: När 1, pinnvärde sätts till 0 asynkront
registerComponent = Register
registerDTip = Data: värde lagras vid klockaktivering
registerEnableTip = Aktivera: Nrä 0, klockaktiveringar ignoreras
registerLabel = reg
registerQTip = Utgång: registrets aktuella värde
registerShowInTab = Visa i registerflik
registerWidthLabel = (%sb)
#
# memory/Rom.java
#
romComponent = ROM
#
# memory/RomContentsListener.java
#
romChangeAction = Redigera ROM-innehåll
#
# memory/ShiftRegister.java
#
shiftRegClearTip = Rensa: när 1, återställer alla till 0 asynkront
shiftRegClockTip = Klocka: värden uppdateras vid aktivering
shiftRegInTip = Ingång: värde att skifta in i första steget
shiftRegisterComponent = Skiftregister
shiftRegisterLabel1 = skiftregister
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = Antal steg
shiftRegLoadTip = Läs in: när 1 (vid skift = 0), alla stegen läser från ingångarna
shiftRegOutTip = Utgång: är innehållet av sista steget
shiftRegParallelAttr = Parallell inläsning
shiftRegShiftTip = Skift: skiftning är inaktiverad när denna är 0
#
# memory/SRFlipFlop.java
#
srFlipFlopComponent = S-R-vippa
#
# plexers/BitSelector.java
#
bitSelectorComponent = Bitselektor
bitSelectorDataTip = Data
bitSelectorGroupAttr = Utgångsbitar
bitSelectorOutputTip = Utgång: värde för den valda gruppen av bitar från data
bitSelectorSelectTip = Selektor: identifierar vilken grupp av data som är vald
#
# plexers/Decoder.java
#
decoderEnableTip = Aktivera: när inte 0, vald utgång är 1
decoderOutTip = Utgång %s
decoderSelectTip = Selektor: identifierar vilken utgång som är 1
#
# plexers/Demultiplexer.java
#
demultiplexerEnableTip = Aktivera: när inte 0, vald utgång är ingång
demultiplexerInTip = ingång
demultiplexerOutTip = Utgång %s
demultiplexerSelectTip = Selektor: identifierar vilken utgång som erhåller ingången
#
# plexers/Multiplexer.java
#
multiplexerEnableTip = Aktivera: När inte 0, utgång är den valda ingången
multiplexerInTip = Ingång %s
multiplexerOutTip = Utgång
multiplexerSelectTip = Selektor: identifierar vilken ingång som blir utgång
#
# plexers/Plexers.java
#
decoderComponent = Dekoder
demultiplexerComponent = Demultiplexer
gateSizeAttr = Grindstorlek
gateSizeNarrowOpt = Smal
gateSizeWideOpt = Bred
multiplexerComponent = Multiplexer
plexerDisabledAttr = Inaktiverad utgång
plexerDisabledFloating = Flytande
plexerDisabledZero = Noll
plexerEnableAttr = Inkludera aktivering?
plexerLibrary = Plexrar
plexerSelectBitsAttr = Selektorbitar
plexerSelectBottomLeftOption = Botten/vänster
plexerSelectLocAttr = Selektorplats
plexerSelectTopRightOption = Topp/höger
plexerThreeStateAttr = Tri-state?
priorityEncoderComponent = Priority Encoder
#
# plexers/PriorityEncoder.java
#
priorityEncoderEnableInTip = Aktivera ingång: 0 inaktiverar komponenten
priorityEncoderEnableOutTip = Aktivera utgång: 1 om aktiverad och ingen ingång är 1
priorityEncoderGroupSignalTip = Gruppselektor: 1 om aktiverad och någon ingång är 1
priorityEncoderInTip = Ingång %s
priorityEncoderOutTip = Utgång: adress för högst indexerade ingång som är 1
#
# StdAttr.java
#
ioLabelColorAttr = Etikettsfärg
stdClassicAppearance = Klassisk Logisim
stdDataWidthAttr = Databitar
stdEvolutionAppearance = Logisim-HolyCross
stdFacingAttr = Riktning
stdLabelAttr = Etikett
stdLabelCenter = Centrum
stdLabelFontAttr = Etikettstypsnitt
stdLabelLocAttr = Etikettsplats
stdLabelVisibility = Etikett synlig
stdLogisimEvolutionAppearance = Logisim-Evolution
stdTriggerAttr = Utlösare
#
# tcl/Tcl.java
#
tclLibrary = TCL
#
# tcl/TclComponentAttributes.java
#
tclConsoleContentFile = TCL-innehållsfil
#
# tcl/TclConsoleReds.java
#
tclConsoleReds = TCL REDS-konsol
#
# tcl/TclGeneric.java
#
tclGeneric = TCL-generic
tclInterfaceDefinition = TCL-interface VHDL-entitet
tclInterfaceDefinitionValue = (klicka för att redigera)
#
# ttl/AbstractTtlGate.java
#
GNDPin = Jordpinne %s
VCCPin = VCC-pinne %s
#
# ttl/DisplayDecoder.java
#
BI = SI
BlankingInputInTip = Släckning
DisplayDecoderComponent = Skärmavkodare
DisplayDecoderInTip = Ingång
DisplayDecoderOutTip = Utgång
ioMultiBit = multibit
LampTestInTip = Lamptestingång
LT = LT
memEnableLabel = akt
RBI = RSI
RippleBlankingInputInTip = Rippelsläckningsingång
#
# ttl/TTL.java
#
ShowInternalStructure = Visa den interna strukturen
TTL7400 = 7400: fyra 2-ingångars NAND-grind
TTL7402 = 7402: fyra 2-ingångars NOR-grind
TTL7404 = 7404: hex inverterare
TTL7408 = 7408: fyra 2-ingångars AND-grind
TTL7410 = 7410: trippel 3-ingångars NAND-grind
TTL7411 = 7411: trippel 3-ingångars AND-grind
TTL74125 = 74125: fyra bussbuffert, tri-state-utgångar, negativ aktivering
TTL7413 = 7413: dubbel 4-ingångars NAND-grind (schmitttrigger)
TTL7414 = 7414: hex inverterare (schmitttrigger)
TTL74165 = 74165: 8-bit parallel-to-serial shift register
TTL74175 = 74175: fyra D-vippa, asynkron nollställning
TTL7418 = 7418: dubbel 4-ingångars NAND-grind(schmitttrigger)
TTL7419 = 7419: hex inverterare (schmitttrigger)
TTL7420 = 7420: dubbel 4-ingångars NAND-grind
TTL7421 = 7421: dubbel 4-ingångars AND-grind
TTL7424 = 7424: fyra 2-ingångars NAND-grind (schmitttrigger)
TTL74266 = 74266: fyra 2-ingångars XNOR-grind
TTL7427 = 7427: trippel 3-ingångars NOR-grind
TTL74273 = 74273: oktal D-vippa med rensning
TTL74283 = 74283: 4-bit binary full adder
TTL7430 = 7430: single 8-ingångars NAND-grind
TTL7432 = 7432: fyra 2-ingångars OR-grind
TTL7436 = 7436: fyra 2-ingångars NOR-grind
TTL74377 = 74377: oktal D-vippa med aktivering
TTL7442 = 7442: BCD-till-decimaldekoder
TTL7443 = 7443: Excess-3-till-decimaldekoder
TTL7444 = 7444: Gray-till-decimaldekoder
TTL7447 = 7447: BCD-till-sjusegmentsdekoder
TTL7451 = 7451: dubbel AND-OR-INVERT-grind
TTL7454 = 7454: Fyra bred AND-OR-INVERT-grind
TTL7458 = 7458: dubbel AND-OR-grind
TTL7464 = 7464: 4-2-3-2 AND-OR-INVERT-grind
TTL7474 = 7474: dubbel D-vippa med förinställning och rensning
TTL7485 = 7485: 4-bitars magnitudkomparator
TTL7486 = 7486: quad 2-ingångars XOR-grind
VccGndPorts = Aktivera Vcc och Jord portar
#
# wiring/BitExtender.java
#
extenderInAttr = Bitbredd in
extenderInputLabel = ingång
extenderInputType = Ingång
extenderMainLabel = tillägg
extenderOneLabel = 1
extenderOneType = en
extenderOutAttr = Bitbredd ut
extenderSignLabel = tecken
extenderSignType = Tecken
extenderTypeAttr = Tilläggstyp
extenderZeroLabel = 0
extenderZeroType = Noll
#
# wiring/Clock.java
#
clockComponent = Klocka
clockHighAttr = Hög varaktighet
clockLowAttr = Låg varaktighet
#
# wiring/Constant.java
#
constantComponent = Konstant
constantValueAttr = Värde
#
# wiring/DurationAttribute.java
#
clockDurationOneValue = 1 tick
clockDurationValue = %s tick
durationLargeMessage = Värde måste vara %s eller mindre.
durationSmallMessage = Värde måste vara åtminstone %s.
freqInvalidMessage = Värde är inte ett giltigt heltal
PORDurationOneValue = 1 sek
PORDurationValue = %s sek
#
# wiring/Pin.java
#
PinCancel = Avbryt
pinComponent = Pinne
PinEnterDecimal = Ange decimal
pinFrozenQuestion = Pinne binds till föräldrakrets tillstånd. Skapa ett nytt kretstillstånd?
pinFrozenTitle = Pinne fäst till föräldrakrets.
pinInputName = Ingång
pinInputToolTip = Lägg till en ingångspinne
PinOkay = OK
pinOutputAttr = Utgång?
pinOutputName = Utgång
pinOutputToolTip = Lägg till en utgångspinne
pinPullAttr = Pull-beteende
pinPullDownOption = Pulldown
pinPullNoneOption = Oförändrat
pinPullUpOption = Pullup
pinThreeStateAttr = Tri-state?
#
# wiring/PowerOnReset.java
#
porHighAttr = POR-tid
PowerOnResetComponent = POR
#
# wiring/Probe.java
#
probeComponent = Sond
#
# wiring/ProbeAttributes.java
#
probeNewPin = Pilformer
stdAppearanceAttr = Utseende
#
# wiring/PullResistor.java
#
pullComponent = Pull-motstånd
pullErrorType = Fel
pullOneType = Ett
pullTypeAttr = Pull-riktning
pullZeroType = Noll
#
# wiring/Transistor.java
#
transistorNDrain = kollektor: en låg emitter kommer att dra kollektorn låg (endas när basen är hög)
transistorNGate = bas: när den är hög låter den ström flöda genom transistorn
transistorNSource = emitter: en låg emitter kommer att dra kollektorn låg (endas när basen är hög)
transistorPDrain = kollektor: en hög emitter kommer att dra kollektorn hög (endast när basen är låg)
transistorPGate = bas: när den är låg låter den ström flöda genom transistorn
transistorPSource = emitter: en hög emitter kommer att dra kollektorn hög (endast när basen är låg)
transistorTypeAttr = Typ
transistorTypeN = N-Typ
transistorTypeP = P-Typ
#
# wiring/TransmissionGate.java
#
transmissionGateDrain = kollektor: styrd av emittern, beroende på p-grind och n-grind
transmissionGateNGate = n-grind: när den är låg låter den en låg emitter passera genom till kollektorn
transmissionGatePGate = p-grind: när den är hög låter den en hög emitter passera genom till kollektorn
transmissionGateSource = emitter: styr kollektorn, beror på p-grind och n-grind
#
# wiring/Tunnel.java
#
tunnelComponent = Tunnel
#
# wiring/Wiring.java
#
extenderComponent = Bitutökare
groundComponent = Jord
noConnectionComponent = Anslut ej
powerComponent = Ström
transistorComponent = Transistor
transmissionGateComponent = Transmissionsgrind
wiringGateAttr = Grindposition
wiringGateBottomRightOption = Botten/höger
wiringGateTopLeftOption = Toppen/vänster
wiringLibrary = Sladdragning


